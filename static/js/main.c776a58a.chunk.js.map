{"version":3,"sources":["serviceWorker.js","components/Error.js","components/BudgetForm.js","components/ExpenseForm.js","components/expenseListItem/ExpenseListItem.js","components/ExpensesList.js","components/RemainingBudget.js","helpers.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","Error","msg","className","BudgetForm","setBudget","setRemaining","useState","value","setValue","setError","onSubmit","event","preventDefault","type","placeholder","onChange","target","shortid","require","ExpenseForm","props","name","setName","amount","setAmount","trim","setExpenseCreated","setExpense","id","generate","htmlFor","ExpenseListItem","ExpensesList","expenses","map","expense","RemainingBudget","budget","remaining","App","setExpenses","expenseCreated","useEffect","Number","ReactDOM","render","document","getElementById","module","hot"],"mappings":"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","file":"static/js/main.c776a58a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({msg}) => <p className=\"alert alert--danger error\">{msg}</p>;\n\nError.propTypes = {\n  msg: PropTypes.string.isRequired\n};\n\nexport default Error;\n","import React, { Fragment, useState } from \"react\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\n\nconst BudgetForm = ({ setBudget, setRemaining }) => {\n  const [value, setValue] = useState(0);\n  const [error, setError] = useState(false);\n\n  const handleChange = (event) => {\n    setValue(+event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (value < 1) {\n      setError(true);\n      return;\n    }\n\n    setError(false);\n    setBudget(value);\n    setRemaining(value);\n  };\n\n  return (\n    <Fragment>\n      <h2>Set up your budget</h2>\n\n      {error && <Error msg=\"Invalid budget value\" />}\n\n      <form onSubmit={handleSubmit} className=\"initialBudget\">\n        <input\n          type=\"number\"\n          className=\"u-full-width\"\n          placeholder=\"Set up your budget\"\n          onChange={handleChange}\n        />\n        <input\n          type=\"submit\"\n          className=\"button-primary u-full-width\"\n          value=\"Set\"\n        />\n      </form>\n    </Fragment>\n  );\n};\n\nBudgetForm.propTypes = {\n  setBudget: PropTypes.func.isRequired,\n  setRemaining: PropTypes.func.isRequired,\n};\n\nexport default BudgetForm;\n","import React, { useState } from \"react\";\nimport Error from \"./Error\";\n// import shortid from \"shortid\";\nimport PropTypes from \"prop-types\";\nvar shortid = require(\"short-id\");\n\nconst ExpenseForm = (props) => {\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (amount < 1 || !name.trim()) {\n      setError(true);\n      return;\n    }\n\n    setError(false);\n    props.setExpenseCreated(true);\n    props.setExpense({ id: shortid.generate(), name, amount });\n    setName(\"\");\n    setAmount(0);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add Expense</h2>\n\n      {error && <Error msg=\"Invalid field values\" />}\n\n      <div className=\"field\">\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          className=\"u-full-width\"\n          placeholder=\"Skates\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"amount\">Amount</label>\n        <input\n          type=\"number\"\n          name=\"amount\"\n          className=\"u-full-width\"\n          placeholder=\"200\"\n          value={amount}\n          onChange={(event) => {\n            setAmount(event.target.value);\n          }}\n        />\n      </div>\n\n      <input\n        type=\"submit\"\n        className=\"button-primary u-full-width\"\n        value=\"Add expense\"\n      />\n    </form>\n  );\n};\n\nExpenseForm.propTypes = {\n  setExpense: PropTypes.func.isRequired,\n  setExpenseCreated: PropTypes.func.isRequired,\n};\n\nexport default ExpenseForm;\n","import React from \"react\";\nimport \"./expenseListItem.scss\";\nimport PropTypes from \"prop-types\";\nconst ExpenseListItem = (props) => {\n  return (\n    <li className=\"expense\">\n      <p>\n        {props.name}\n\n        <span className=\"amount\">{props.amount} €</span>\n      </p>\n    </li>\n  );\n};\n\nExpenseListItem.propTypes = {\n  expense: PropTypes.array.isRequired,\n};\n\nexport default ExpenseListItem;\n","import React from \"react\";\nimport ExpenseListItem from \"./expenseListItem/ExpenseListItem\";\nimport PropTypes from \"prop-types\";\n\nconst ExpensesList = (props) => {\n  return (\n    <div className=\"expenses\">\n      <h2>Expenses</h2>\n\n      <ul>\n        {props.expenses.map((expense) => {\n          // console.log(expense);\n          return (\n            <ExpenseListItem\n              key={expense.id}\n              name={expense.name}\n              amount={expense.amount}\n              expense={props.expenses}\n            ></ExpenseListItem>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nExpensesList.propTypes = {\n  expenses: PropTypes.array.isRequired,\n};\n\nexport default ExpensesList;\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {getRemainingClass} from '../helpers';\n\nconst RemainingBudget = (props) => {\n  return (\n    <Fragment>\n      <div className=\"alert alert--primary\">Budget: {props.budget} €</div>\n      <div className={getRemainingClass(props.budget, props.remaining)}>\n        Remaining: {props.remaining} €\n      </div>\n    </Fragment>\n  );\n};\n\nRemainingBudget.propTypes = {\n  budget: PropTypes.number.isRequired,\n  remaining: PropTypes.number.isRequired\n};\n\nexport default RemainingBudget;\n","export const getRemainingClass = (budget, remaining) => {\n  let className;\n\n  if (budget / 4 > remaining) {\n    //remaining<25%\n    className = 'alert alert--danger';\n  } else if (budget / 2 > remaining) {\n    //remaining<50%\n    className = 'alert alert--warning';\n  } else {\n    className = 'alert alert--success';\n  }\n\n  return className;\n};\n","import React, { useState, useEffect } from \"react\";\nimport BudgetForm from \"./components/BudgetForm\";\nimport ExpenseForm from \"./components/ExpenseForm\";\nimport ExpensesList from \"./components/ExpensesList\";\nimport RemainingBudget from \"./components/RemainingBudget\";\nimport \"./index.scss\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [budget, setBudget] = useState(0);\n  const [remaining, setRemaining] = useState(0);\n  const [expenses, setExpenses] = useState([]);\n  const [expense, setExpense] = useState([]);\n  const [expenseCreated, setExpenseCreated] = useState(false);\n\n  useEffect(() => {\n    if (expenseCreated) {\n      setExpenses([...expenses, expense]);\n      setRemaining(remaining - Number(expense.amount));\n      setExpenseCreated(false);\n    }\n  });\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Budget manager</h1>\n      </header>\n\n      <div className=\"content content--main\">\n        {budget === 0 ? (\n          <BudgetForm setBudget={setBudget} setRemaining={setRemaining} />\n        ) : (\n          <div className=\"row\">\n            <div className=\"one-half column\">\n              <ExpenseForm\n                setExpense={setExpense}\n                setExpenseCreated={setExpenseCreated}\n              />\n            </div>\n            <div className=\"one-half column\">\n              <ExpensesList expenses={expenses} />\n              <RemainingBudget budget={budget} remaining={remaining} />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nmodule.hot && module.hot.accept();\n"],"sourceRoot":""}